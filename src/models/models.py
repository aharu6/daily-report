class DataModel:
    def create_client_storage(self, page):
        if not hasattr(page, "client_storage"):
            page.client_storage.set("phName", [])

    def __init__(self):
        self.phName = []

    def load_data(self, page):
        # ストレージがなければ作成する
        DataModel.create_client_storage(self, page)
        phNameList = page.client_storage.get("phName")
        if phNameList == None:
            phNameList = []
        self.phName = phNameList
        return phNameList

    def times(self):
        return [
            "8:30 8:45",
            "8:45 9:00",
            "9:00 9:15",
            "9:15 9:30",
            "9:30 9:45",
            "9:45 10:00",
            "10:00 10:15",
            "10:15 10:30",
            "10:30 10:45",
            "10:45 11:00",
            "11:00 11:15",
            "11:15 11:30",
            "11:30 11:45",
            "11:45 12:00",
            "12:00 12:15",
            "12:15 12:30",
            "12:30 12:45",
            "12:45 13:00",
            "13:00 13:15",
            "13:15 13:30",
            "13:30 13:45",
            "13:45 14:00",
            "14:00 14:15",
            "14:15 14:30",
            "14:30 14:45",
            "14:45 15:00",
            "15:00 15:15",
            "15:15 15:30",
            "15:30 15:45",
            "15:45 16:00",
            "16:00 16:15",
            "16:15 16:30",
            "16:30 16:45",
            "16:45 17:00",
            "17:00 17:15",
            "17:15 17:30",
            "17:30 17:45",
            "17:45 18:00",
            "18:00 18:15",
            "18:15 18:30",
            "18:30 18:45",
            "18:45 19:00",
            "19:00 19:15",
            "19:15 19:30",
            "19:30 19:45",
            "19:45 20:00",
            "20:00 20:15",
            "20:15 20:30",
            "20:30 20:45",
            "20:45 21:00",
            "21:00 21:15",
            "21:15 21:30",
            "21:30 21:45",
            "21:45 22:00",
            "22:00 22:15",
            "22:15 22:30",
        ]

    def time_for_visual(self):
        return [
            "8:30",
            "8:45",
            "9:00",
            "9:15",
            "9:30",
            "9:45",
            "10:00",
            "10:15",
            "10:30",
            "10:45",
            "11:00",
            "11:15",
            "11:30",
            "11:45",
            "12:00",
            "12:15",
            "12:30",
            "12:45",
            "13:00",
            "13:15",
            "13:30",
            "13:45",
            "14:00",
            "14:15",
            "14:30",
            "14:45",
            "15:00",
            "15:15",
            "15:30",
            "15:45",
            "16:00",
            "16:15",
            "16:30",
            "16:45",
            "17:00",
            "17:15",
            "17:30",
            "17:45",
            "18:00",
            "18:15",
            "18:30",
            "18:45",
            "19:00",
            "19:15",
            "19:30",
            "19:45",
            "20:00",
            "20:15",
            "20:30",
            "20:45",
            "21:00",
            "21:15",
            "21:30",
            "21:45",
            "22:00",
            "22:15",
            "22:30",
        ]

    def amTime(self):
        return [
            "8:30 8:45",
            "8:45 9:00",
            "9:00 9:15",
            "9:15 9:30",
            "9:30 9:45",
            "9:45 10:00",
            "10:00 10:15",
            "10:15 10:30",
            "10:30 10:45",
            "10:45 11:00",
            "11:00 11:15",
            "11:15 11:30",
            "11:30 11:45",
            "11:45 12:00",
            "12:00 12:15",
            "12:15 12:30",
        ]

    def pmTime(self):
        return [
            "12:30 12:45",
            "12:45 13:00",
            "13:00 13:15",
            "13:15 13:30",
            "13:30 13:45",
            "13:45 14:00",
            "14:00 14:15",
            "14:15 14:30",
            "14:30 14:45",
            "14:45 15:00",
            "15:00 15:15",
            "15:15 15:30",
            "15:30 15:45",
            "15:45 16:00",
            "16:00 16:15",
            "16:15 16:30",
            "16:30 16:45",
            "16:45 17:00",
            "17:00 17:15",
            "17:15 17:30",
            "17:30 17:45",
            "17:45 18:00",
            "18:00 18:15",
            "18:15 18:30",
            "18:30 18:45",
            "18:45 19:00",
            "19:00 19:15",
            "19:15 19:30",
            "19:30 19:45",
            "19:45 20:00",
            "20:00 20:15",
            "20:15 20:30",
            "20:30 20:45",
            "20:45 21:00",
            "21:00 21:15",
            "21:15 21:30",
            "21:30 21:45",
            "21:45 22:00",
            "22:00 22:15",
            "22:15 22:30",
        ]

    def draggable_data(self):
        return {
            "_402": {"task": "薬剤使用状況の把握等（情報収集）","info":"台車鑑査含む"},  # 0
            "_406": {"task": "服薬指導＋指導記録作成","info":"記録を作成したものは全てカウントする"},  # 1
            "_410": {"task": "無菌調製関連業務","info":""},  # 2
            "_414": {"task": "薬剤セット・確認","info":""},  # 3
            "_418": {"task": "持参薬を確認","info":""},  # 4
            "_422": {"task": "薬剤服用歴等について保険薬局へ照会","info":""},  # 5
            "_426": {"task": "処方代理修正","info":""},  # 6
            "_430": {"task": "TDM実施","info":""},  # 7
            "_434": {"task": "カンファレンス","info":""},  # 8
            "_438": {"task": "医師からの相談","info":""},  # 9
            "_442": {"task": "看護師からの相談","info":""},  # 10
            "_446": {
                "task": "その他の職種からの相談",
                "info":""
            },  # 11　#部下からの相談応需、他部署からの相談応需を含めることとする
            "_450": {"task": "委員会","info":""},  # 12
            "_454": {"task": "勉強会参加","info":""},  # 13
            "_459": {"task": "WG活動","info":""},  # 14
            "_463": {"task": "1on1","info":""},  # 15
            "_467": {"task": "ICT/AST","info":""},  # 16
            "_471": {"task": "褥瘡","info":""},  # 17
            "_475": {"task": "TPN評価","info":""},  # 18
            "_479": {"task": "手術後使用薬剤確認","info":""},  # 19
            "_483": {"task": "手術使用薬剤準備","info":""},  # 20
            "_487": {"task": "周術期薬剤管理関連","info":""},  # 21
            "_491": {"task": "麻酔科周術期外来","info":""},  # 22
            "_495": {"task": "手術使用麻薬確認・補充","info":""},  # 23
            "_499": {"task": "術後疼痛管理チーム回診","info":""},  # 24
            "_503": {"task": "脳卒中ホットライン対応","info":""},  # 25
            "_507": {"task": "業務調整","info":""},  # 26　業務調整のみに変更
            "_511": {"task": "休憩","info":""},  # 27
            "_515": {"task": "その他","info":""},  # 28
            "_519": {"task": "管理業務","info":""},  # 29
            "_523": {"task": "NST","info":""},  # 30
            "_527": {"task": "問い合わせ応需","info":""},  # 31
            "_531": {"task": "マスター作成・変更","info":""},  # 32
            "_535": {"task": "薬剤情報評価","info":""},  # 33
            "_539": {"task": "後発品選定","info":""},  # 34
            "_543": {"task": "会議資料作成","info":""},  # 35
            "_547": {"task": "配信資料作成","info":""},  # 36
            "_551": {"task": "フォーミュラリー作成","info":""},  # 37
            "_555": {"task": "外来処方箋修正","info":""},  # 38
            "_559": {"task": "勉強会資料作成・開催","info":""},  # 39
            "_563": {"task": "お役立ち情報作成","info":""},  # 40            
            "_567": {"task": "薬剤使用期限確認","info":""},  # 41
            "_571": {"task": "抗菌薬相談対応","info":""},  # 42
        }
    def count_dict(self):
        return {}
    
    def locations():
        return{
            "IC": "ICU",
            "OR":"OR",
            "HR":"HR",
            "1E":"1E",
            "3A":"3A",
            "3B":"3B",
            "3C":"3C",
            "CCU":"CCU",
            "4A":"4A",
            "4B":"4B",
            "4C":"4C",
            "4D":"4D",
            "HCU":"HCU",
            "5A":"5A",
            "5B":"5B",
            "5C":"5C",
            "5D":"5D",
            "DI":"DI",


        }